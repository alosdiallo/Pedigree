##The user should install the following packages before running the app
#Type in R the following: 
#install.packages("shiny)
#install.packages("glue")
#install.packages("readxl")
#install.packages("kinship2)
#install.packages("tools")
#install.packages("shinythemes")
#install.packages("quadprog")
#install.packages("Matrix")
#install.packages("shinycssloaders")
#install.packages("shinycustomloader")

##Things that should be fixed: 
#message if the columns were not the ones that we seek
#change if statement to switch
#I have to search for the NA and replace them by 1 in rorg and Iga data (or columns similar to them)


#shiny deploy error
#Unable to determine package source for Bioconductor package BiocGenerics: Repository must be specified 
#options(repos = BiocInstaller::biocinstallRepos())
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
options(repos = BiocManager::repositories())
library(shiny)
library(glue)
library(readxl)
library(kinship2)
library(Matrix)
library(quadprog)
library(igraph)
library(FamAgg)
library(tools)
#library(shinythemes)
#library(shinycssloaders)
#library(shinycustomloader)


#Set maximum upload size to 1000 mb
options(shiny.maxRequestSize = 1000*1024^2)

#chaining conditions together with the %then% operator, to display one validation error message at a time.  
`%then%` <- shiny:::`%OR%`

#Function 'Check' to check for errors in the excel file and validate for them, in order not to cause any failure in ploting the pedigree
#Error might be caused for missing IDs & variables / Duplicated IDs
Check <- function(inputFile, id, dadid, momid, sex, affected){
  for(i in  1:nrow(inputFile)){
    shiny::validate(
      need((id[i]!= "NA"), label = "Missing value for the  'ID' variable! Please check your input excel file. All variables")%then%
        need(!any((duplicated(id))), label = "Duplicated ID exists! Please check your input excel file. Unique ID variables")%then%
        need((dadid[i]!= "NA"), label = "Missing value for the 'father' ID variable Please check your input excel file. All variables")%then%
        need((momid[i] != "NA"), label= "Missing value for the 'mother' ID variable! Please check your input excel file. All variables")%then%
        need((sex[i] != "NA"), label = "Missing value for the 'sex' variable! Please check your input excel file. All variables")%then%
        need((affected[i] != "NA"), label = "Missing value for the 'affected' variable! Please check your input excel file. All variables"),
      errorClass = "MyClass"
    )
  }
  
}



# UI for Shiny
ui <-
  fluidPage( title = "Pedigree Chart App", style = "margin:25px;",
             
             #Include Styling for the app
             #  includeCSS(path = "www/css/style.css"),

             #shinythemes::themeSelector(),
             #theme = shinytheme("readable"),
             fluidRow(
               column(width = 10,
                      img( src = "dzar.png", style = "float:left;"),
                      #tags$h4("Shiny app to visualize family tree")
                      img( src = "text.png",  style = "float:left;")
                      #tags$hr()
               ),
               column(width = 2,
                      actionButton(inputId = "reloadApp",label = "Reload App", class="btn-danger")
               )
             ),
             #tags$br(),
             sidebarLayout(
               sidebarPanel(
                 wellPanel(
                           fileInput(inputId = "Selectedfile",
                                     label = "Upload an excel file",
                                     multiple = FALSE,
                                     accept=c('application/vnd.ms-excel',
                                              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                                              '.xls',
                                              '.xlsx')),
                           actionButton(inputId = "SubmitButtonToColor",label = "Display")
                 ),
                           hr(),
                           wellPanel(
                           selectizeInput(inputId = "SelectedColumn",
                                          label = "Choose the dependent column to color the plot",
                                          choices = NULL,
                                          selected = NULL
                           ),
                           selectizeInput(inputId = "SelectedColumnType",
                                          label = "Type of column selected",
                                          choices = c("character", "numeric"),
                                          selected = NULL
                           ),
                           hr(),
                           selectizeInput(inputId = "NumClass", label = "Number of classes", choices = 1:6),
                           selectizeInput(inputId = "SelectedColors",
                                          label = "Choose a range of colors to color the tree",
                                          choices = c("blue", "green", "yellow", "orange", "red", "brown4"),
                                          options = list(maxItems = 5),
                                          selected = NULL,
                                          multiple = TRUE
                           ),
                           #sliderInput(inputId = "RangeColors", label = "Color Palletes", min = "Red", max = "blue", value = 1),
                           selectizeInput(inputId = "ShowByID",
                                          label = "Visualize the pedigree By",
                                          choices = c("ID", "values", "both"),
                                          selected = NULL,
                                          multiple = FALSE
                           ),
                           actionButton(inputId = "SubmitButtonToPlot",label = "Plot pedigree")
                           )
                          # tags$hr(),
                          # wellPanel(
                          # selectizeInput(inputId = "SelectID", label = "Select IDs for subpedigree Plot", choices = NULL, multiple = TRUE),
                           #actionButton(inputId = "bttnSubpedigree", label = "Plot subpedigree")
                           #)
               ),
             mainPanel(
             tabsetPanel( id = "TheMainTabs", type = "pills",
                          tabPanel( title ="Upload File",
                                    dataTableOutput(outputId = "contents")
                          ),
                          tabPanel(title = "Plot",
                                            wellPanel(id="PlotPedigreeOutput",
                                                      tabsetPanel(id = "PlotwellPanel",
                                                                  tabPanel(title = "Pedigree", 
                                                                           plotOutput("pedigreePlot", height = "700px"), 
                                                                           tags$br(),
                                                                           downloadButton(outputId = "downloadPedigree_png", label = "Download as PNG"),
                                                                           downloadButton(outputId = "downloadPedigree_svg", label = "Download as SVG"),
                                                                           downloadButton(outputId = "downloadPedigree_pdf", label = "Download as PDF")
                                                                  )
                                                                #  tabPanel(title = "Subpedigree",
                                                                          # plotOutput("subpedigreePlot", height = "700px")
                                                                           #)
                                                      )
                                            )
                                   
                          ),
                          tabPanel(title = "Help"),
                          tabPanel(title = "About")
                          
             )
             )
             )
  )




#Shiny Server
server <- function(input, output, session){
  
  # Reload App
  observeEvent(input$reloadApp, {
    session$reload()
  })
  
  
  #Select the column you want the color of the pedigree plot to be based on
  observeEvent(input$Selectedfile, {
    
    #Error needs to be fixed
    #Error to be shown to user in case other than excel file types was uploaded
    ext<-c('application/vnd.ms-excel','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    excel_required <-is.element(input$Selectedfile$type,ext)
    shiny::validate(
      need(excel_required, label = "Input Excel File")
    )
    #req(input$Selectedfile)
    pedigreefile <- read_excel(path =input$Selectedfile$datapath, sheet = 1, col_names = TRUE, na =  " ")
    attach(pedigreefile)
    NamesOfColumns <- colnames(pedigreefile)
    updateSelectizeInput(session = session, inputId = "SelectedColumn", choices = NamesOfColumns, selected = NamesOfColumns[7])
   # updateSelectizeInput(session = session, inputId = "SelectID", choices = pedigreefile$ID, selected = NamesOfColumns[7])
  })
  
  
  #### By clicking 'Submit' button, the user accesses the Color Tab
  observeEvent(input$SubmitButtonToColor, {
    if(is.null(input$Selectedfile)){
      showNotification(ui="Please upload your file", duration = 5, closeButton = TRUE, type = "message")
    }
    
    #display the contents of the uploaded excel file
    output$contents <- renderDataTable(
      #  Errordata()
      read_excel(path =input$Selectedfile$datapath, sheet = 1, col_names = TRUE, na = " ")
    )
  })
  
  
  #### By clicking the 'Submit' button, the user accesses the plot Tab
  observeEvent(input$SubmitButtonToPlot, {
    if(!is.null(input$SelectedColors)){
      updateTabsetPanel(session = session, inputId = "TheMainTabs", selected = "Plot") 
    }
    else
    {
      showNotification(ui="Please choose colors to plot the pedigree", duration = 5, closeButton = TRUE, type = "error")
    }
  })
  
  #### Adjust the range of colors with respect to the selected column
  observeEvent(input$NumClass, {
      updateSelectizeInput(session = session, inputId = "SelectedColors",
                           options = list(maxItems = input$NumClass),
                           selected = NULL
      )
  })
  
#  observeEvent(input$bttnSubpedigree, {
 #   output$subpedigreePlot <- renderPlot({
 #     pedigreefile <- read_excel(path =input$Selectedfile$datapath, sheet = 1, col_names = TRUE, na =  " ")
 ##     attach(pedigreefile)
 #     f <- father[input$SelectID]
  #    m <- mother[input$SelectID]
 #     s <- sex[input$SelectID]
 #     subped <- pedigree( id = input$SelectID ,dadid = f ,momid = m,sex = s)
  #    tryCatch({
  #      plot.pedigree(x=subped)
  #    },
   #     error=function(e){
   #       stop(safeError("There are not enough connections to plot the subpedigree"))
   #     }
  #    )
  #  })
 #s })
  #### Press Plot button to get the pedigree Plot colored 
  observeEvent(input$SubmitButtonToPlot, { 
    
    output$pedigreePlot <- renderPlot({
      
      #req(input$Selectedfile)
      #req(input$SelectedColors)
      pedigreefile <- read_excel(path =input$Selectedfile$datapath, sheet = 1, col_names = TRUE, na =  " ")
      # data()
      if ("IgA" %in% colnames(pedigreefile)){
        pedigreefile$IgA[is.na(pedigreefile$IgA)] <- 1
      }
      if ("rorg" %in% colnames(pedigreefile)){
        pedigreefile$rorg[is.na(pedigreefile$rorg)] <- 1
      }
      
      #pedigreefile <- input$Selectedfile
      attach(pedigreefile)
      #The user has to put the variable names according to the column names in his/her the excel file: such as mother/father/....
      ped <- pedigree( id = ID,dadid = father,momid = mother,sex = sex, affected = affected)
      fad <- FAData(pedigree = ped) 
      val <- paste(get(input$SelectedColumn))
      
      
      if (input$SelectedColumnType == "character"){  #character values
        #if (is.na(as.numeric(input$SelectedColumn)))
        ColStrain <- c(input$SelectedColors)[as.factor(get(input$SelectedColumn))]
        switch (input$ShowByID,
                values = {
                  plot.pedigree(x = ped, col = ColStrain, id = val, cex = .7)
                },
                ID = {
                  plot.pedigree(x = ped, col = ColStrain, id = ID, cex = .7)
                }, 
                both = {
                  valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                  plot.pedigree(x = ped, col = ColStrain, id = paste(ID, val), cex = .7)
                }
        )
      }
      else {
        #if the type of column values are numeric values (double/integer...)
        # #86888A stands for gray, which refers to the missing values 
        rgb.palette <- colorRampPalette(c(input$SelectedColors, "purple", "#86888A"), space = "rgb")
        palette(rgb.palette(100))
        z = get(input$SelectedColumn) * 100
        #align.pedigree(ped, packed=TRUE, width=10, align=TRUE, hints=ped$hints)
        switch (input$ShowByID,
                values = {
                  plot.pedigree(x = ped, col = z, id = val, cex = .7, pconnect = 0.1, branch = 1)
                },
                ID = {
                  plot.pedigree(x = ped, col = z, id = ID, cex = .7, pconnect = 0.1, branch = 1)
                },
                both = {
                  valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                  plot.pedigree(x = ped, col = z, id = valId, cex = .7, pconnect = 0.1, branch = 1)
                }
        )
      }
      
      #Downlonad the pedigree plot as PNG
      output$downloadPedigree_png <- downloadHandler(
        filename = function(){
          paste('PedigreePlot', '.png', sep = ' ')
        },
        content = function(file){
          png(file, width = 1500, height = 800)
          if (input$SelectedColumnType == "character"){  #character values
            #if (is.na(as.numeric(input$SelectedColumn)))
            ColStrain <- c(input$SelectedColors)[as.factor(get(input$SelectedColumn))]
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = ColStrain, id = val, cex = .7)
                    },
                    ID = {
                      plot.pedigree(x = ped, col = ColStrain, id = ID, cex = .7)
                    }, 
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = ColStrain, id = paste(ID, val), cex = .7)
                    }
            )
          }
          else {
            #if the type of column values are numeric values (double/integer...)
            # #86888A stands for gray, which refers to the missing values 
            rgb.palette <- colorRampPalette(c(input$SelectedColors, "purple", "#86888A"), space = "rgb")
            palette(rgb.palette(100))
            z = get(input$SelectedColumn) * 100
            #align.pedigree(ped, packed=TRUE, width=10, align=TRUE, hints=ped$hints)
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = z, id = val, cex = .7, pconnect = 0.1, branch = 1)
                    },
                    ID = {
                      plot.pedigree(x = ped, col = z, id = ID, cex = .7, pconnect = 0.1, branch = 1)
                    },
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = z, id = valId, cex = .7, pconnect = 0.1, branch = 1)
                    }
            )
          }
          dev.off()
        }
      )
      
      #Downlonad the pedigree plot as SVG
      output$downloadPedigree_svg <- downloadHandler(
        filename = function(){
          paste('PedigreePlot', '.svg', sep = ' ')
        },
        content = function(file){
          svg(file, width = 20)
          if (input$SelectedColumnType == "character"){  #character values
            #if (is.na(as.numeric(input$SelectedColumn)))
            ColStrain <- c(input$SelectedColors)[as.factor(get(input$SelectedColumn))]
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = ColStrain, id = val, cex = .7)
                    },
                    ID = {
                      plot.pedigree(x = ped, col = ColStrain, id = ID, cex = .7)
                    }, 
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = ColStrain, id = paste(ID, val), cex = .7)
                    }
            )
          }
          else {
            #if the type of column values are numeric values (double/integer...)
            # #86888A stands for gray, which refers to the missing values 
            rgb.palette <- colorRampPalette(c(input$SelectedColors, "purple", "#86888A"), space = "rgb")
            palette(rgb.palette(100))
            z = get(input$SelectedColumn) * 100
            #align.pedigree(ped, packed=TRUE, width=10, align=TRUE, hints=ped$hints)
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = z, id = val, cex = .7, pconnect = 0.1, branch = 1)
                    },
                    ID = {
                      plot.pedigree(x = ped, col = z, id = ID, cex = .7, pconnect = 0.1, branch = 1)
                    },
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = z, id = valId, cex = .7, pconnect = 0.1, branch = 1)
                    }
            )
          }
          dev.off()
        }
      )
      
      #Downlonad the pedigree plot as PDF
      output$downloadPedigree_pdf <- downloadHandler(
        filename = function(){
          "PedigreePlot.pdf"
        },
        content = function(file){
          pdf(file, width = 15)
          z = get(input$SelectedColumn) * 100
          #plot.pedigree(x = ped,col = z,cex=.7, id=val, pconnect = 0.1, width = 10, branch = 1, mar = c(2,9,2,9))
          if (input$SelectedColumnType == "character"){  #character values
            #if (is.na(as.numeric(input$SelectedColumn)))
            ColStrain <- c(input$SelectedColors)[as.factor(get(input$SelectedColumn))]
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = ColStrain, id = val, cex = .7)
                    },
                    ID = {
                      plot.pedigree(x = ped, col = ColStrain, id = ID, cex = .7)
                    }, 
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = ColStrain, id = paste(ID, val), cex = .7)
                    }
            )
          }
          else {
            #if the type of column values are numeric values (double/integer...)
            # #86888A stands for gray, which refers to the missing values 
            rgb.palette <- colorRampPalette(c(input$SelectedColors, "purple", "#86888A"), space = "rgb")
            palette(rgb.palette(100))
            z = get(input$SelectedColumn) * 100
            #align.pedigree(ped, packed=TRUE, width=10, align=TRUE, hints=ped$hints)
            switch (input$ShowByID,
                    values = {
                      plot.pedigree(x = ped, col = z, id = val, cex = .7, pconnect = 0.1, branch = 1, mar = c(2,9,2,9))
                    },
                    ID = {
                      plot.pedigree(x = ped, col = z, id = ID, cex = .7, pconnect = 0.1, branch = 1, mar = c(2,9,2,9))
                    },
                    both = {
                      valId = paste(ID, get(input$SelectedColumn), sep = "\n")
                      plot.pedigree(x = ped, col = z, id = valId, cex = .7, pconnect = 0.1, branch = 1, mar = c(2,9,2,9))
                    }
            )
          }
          dev.off()
        }
      )
    })
  })
  
  
  #To enable new-session reconnections, in case the client has disconnected from the server (and has reached a gray-out state)
  session$allowReconnect(TRUE)
  
}

shinyApp(ui = ui, server = server)
